require('dotenv').config();
const url = require('url');
const winston = require('winston');
const WinstonCloudWatch = require('@my-ideas/winston-cloudwatch');
const os = require('os');

// set default log level.
const logLevel = 'debug';

/**npm
 * Wrap console.log with some sugar to AWS CloudWatch Logs
 * @param scriptSource Always pass __filename here
 * @param data Object an object that is always appended to each log statement
 * @constructor
 */
function Loggy(scriptSource, data) {


    // Set up logger
    const customColors = {
        trace: 'white',
        debug: 'green',
        info: 'blue',
        warn: 'yellow',
        error: 'red',
        fatal: 'red'
    };

    // sriptsource is __filename.
    // Remove from the path everything that is up to the module folder, and assume that the module name match the module folder
    let appRootDir = require('app-root-dir').get().split('/');
    appRootDir.pop();
    appRootDir = appRootDir.join('/');

    let source = scriptSource.replace(appRootDir, '').replace(/\//g, '.');
    if(source.startsWith('.')){
        source = source.replace('.','');
    }

    this.scriptName = source;
    this.data = data || {};

    const transports = [
        new (winston.transports.Console)({
            colorize: true,
            timestamp: true,
            prettyPrint: JSON.stringify,
            stderrLevels: []
        })];

    // Log in AWS
    if(process.env.LOGGY_CW_GROUPNAME) {
        transports.push(new WinstonCloudWatch({
            // logGroupName: `porketta/${process.env.ENV}/mod_proxy/`,
            logGroupName: process.env.LOGGY_CW_GROUPNAME,
            logStreamName: os.hostname(),
            awsAccessKeyId: process.env.AWS_ACCESS_KEY_ID,
            awsSecretKey: process.env.AWS_SECRET_ACCESS_KEY,
            awsRegion: process.env.AWS_REGION,
            jsonMessage: true,
            level: logLevel
        }));
    }
    else {
        console.log("**********************************");
        console.log("env LOGGY_CW_GROUPNAME not set   *");
        console.log("Logs won't be sent to CloudWatch *");
        console.log("**********************************");
    }


    const logger = new (winston.Logger)({
        colors: customColors,
        level: logLevel,
        levels: {
            fatal: 0,
            error: 1,
            warn: 2,
            info: 3,
            debug: 4,
            trace: 5
        },
        transports
    });

    winston.addColors(customColors);

    // Extend logger object to properly log 'Error' types
    const origLog = logger.log;
    const me = this;
    logger.log = function (level, msg) {
        if (msg instanceof Error) {
            const args = Array.prototype.slice.call(arguments);
            args[1] = msg.stack;
            origLog.apply(logger, args)
        } else {

            // level
            // message
            // context
            if(arguments.length === 3) {
                origLog.apply(logger, [arguments[0], arguments[1], Object.assign(me.data, arguments[2])]);
            }

            else {
                origLog.apply(logger, [arguments[0], arguments[1], me.data]);
            }


        }
    };



    return logger;
}

/* Methods are generated by winston. I like my IDE to know what I am typing... */
Loggy.prototype.trace = function(){};
Loggy.prototype.debug = function(){};
Loggy.prototype.info = function(){};
Loggy.prototype.warn = function(){};
Loggy.prototype.error = function(){};
Loggy.prototype.fatal = function(){};

if(process.env.AWS_LAMBDA_FUNCTION_NAME){
    // If running in a lambda just wrap console.lot
    module.exports = require('./Log2');
}
else {
    module.exports = Loggy;
}

